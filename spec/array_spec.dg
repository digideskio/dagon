describe("Array") ->
  it("can be accessed") ->
    array: [1, 2, 3]
    assert-equal(array[0], 1)

  it("can assign elements") ->
    array: [1]
    array[1]: 2
    assert-equal(array[0], 1)
    assert-equal(array[1], 2)

  it("can push elements") ->
    array: []
    array.push(1)
    assert-equal(array, [1])

  it("knows the last element") ->
    array: [1, 2, 3]
    assert-equal(array.last, 3)

  it("joins an array with glue") ->
    array: [1, 2, 3]
    assert-equal(array.join("#"), "1#2#3")

  it("can pop an element") ->
    array: [1, 2, 3]
    x: array.pop
    assert-equal(array, [1, 2])
    assert-equal(x, 3)

  it("can add arrays together") ->
    assert-equal([1, 2, 3] + [4], [1, 2, 3, 4])

  it("can subtract arrays from each other") ->
    assert-equal([1, 1, 2, 2, 3, 3, 4, 5] - [1, 2, 4], [3, 3, 5])

  it("can repeat itself") ->
    assert-equal([1] * 3, [1, 1, 1])

  it("can unshift an element") ->
    array: [2, 3]
    array.unshift(1)
    assert-equal(array, [1, 2, 3])

  it("can shift an element") ->
    array: [1, 2, 3]
    x: array.shift
    assert-equal(array, [2, 3])
    assert-equal(x, 1)

  it("knows if it is empty") ->
    assert-equal([].empty?, true)
    assert-equal([1].empty?, false)

  it("knows if it has any elements") ->
    assert-equal([].any?, false)
    assert-equal([1].any?, true)

  it("knows it's length") ->
    assert-equal([1, 2, 3].length, 3)

  it("can be inspected") ->
    assert-equal(["1"].inspect, "[\"1\"]")

  it("can reduce the array") ->
    array: [1, 2, 3]
    value: array.reduce(0) ->(sum, current)
      sum + current
    assert-equal(value, 6)

  it("can iterate over the array") ->
    array: [1, 2, 3]
    x: 0
    array.each ->(i)
      x: x + i
    assert-equal(x, 6)
